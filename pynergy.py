"""
name: pynergy.py
usage: pynergy.py [-h] -i INPUT -v VALENCE -e ENERGY [-d DELTA]
author: Sean Anderson (https://github.com/roguephysicist)

This script calculates transition energies between energy bands using eigen-
energy files generated by ABINIT during a band structure calculation. This
script allows you to input a desired energy value and finds all the upward
transitions that can produce that value within a specified tolerance.

If the input file is an unformatted EIG file produced by ABINIT, you can use
the adjoining 'eigenconvert.py' program that will automatically format it to a
plottable file. You can then use that file to calculate the transitions.
"""

import argparse
import numpy as np

OFFSET = 0

def transitions(inputfile, valence, energy, delta):
    """
    loops over all values in input file and calculates upward transitions
    and selects only the ones that match the desired value.
    """
    textfile = 'transitions.dat'
    arrowfile = 'gnuplotarrows.txt'
    file1 = open(textfile, 'w') # opens output file for writing
    file2 = open(arrowfile, 'w')    # opens output file for writing
    eigen = np.loadtxt(inputfile)   # creates a numpy array from input file
    
    print ('Calculating transitions for {0} around {1} eV with a tolerance',
          'value of {2}.\nWriting transitions to {3} and gnuplot arrow codes',
          'to {4}.'.format(inputfile, energy, delta, textfile, arrowfile))
    
    kpts = len(eigen)   # max k-points = file length
    bands = len(eigen[0])   # max bands = columns
    
    for kpt in range(0, kpts):  # loops over k-points
        for start in range(1, valence+1):   # loops over all valence bands
            for finish in range(valence+1, bands):  # loops over upward bands
                orig = eigen[kpt, start]    # value at origin band
                targ = eigen[kpt, finish]   # value at target band
                diff = abs(orig - targ) # the difference
                # tests to see if diff is between desired value +/- delta
                if energy - delta <= diff <= energy + delta:
                    text = '{0:0>9.6f} eV | k-point: {1:0>3d} | ' +\
                           'bands: {2:0>2d} -> {3:0>2d}\n'\
                           .format(diff, kpt + 1, start, finish)
                    textfile.write(text)
                    arrows = 'set arrow from {0},{1:.5f} to {0},{2:.5f}\n'\
                             .format(kpt + 1, orig - OFFSET, targ - OFFSET)
                    arrowfile.write(arrows)
    textfile.close()    # closes file
    arrowfile.close()   # closes file
    print 'Done'

# parses command line options
parser = argparse.ArgumentParser(description='This script calculates '\
                        'transition energies between energy bands '\
                        'using eigen-energy files generated by ABINIT '\
                        'during a band structure calculation. This script '\
                        'allows you to input a desired energy value and '\
                        'finds all the upward transitions that can produce '\
                        'that value within a specified tolerance.')
parser.add_argument('-i', '--input', help='Input file name', required=True)
parser.add_argument('-v', '--valence', help='Number of valence bands', type=int, required=True)
parser.add_argument('-e', '--energy', help='Energy value in eV', type=float, required=True)
parser.add_argument('-d', '--delta', help='Energy delta in eV (default = 0.001 eV)', type=float, default=0.001, required=False)
args = parser.parse_args()

transitions(args.input, args.valence, args.energy, args.delta)
